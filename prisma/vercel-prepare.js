// Script sp√©cial pour pr√©parer Prisma sur Vercel
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Fonction pour ex√©cuter des commandes shell
function runCommand(command) {
  try {
    console.log(`Ex√©cution de la commande: ${command}`);
    execSync(command, { stdio: 'inherit' });
  } catch (error) {
    console.error(`Erreur lors de l'ex√©cution de la commande: ${command}`, error);
    process.exit(1);
  }
}

// V√©rifier si nous sommes sur Vercel
const isVercel = process.env.VERCEL === '1';

if (isVercel) {
  console.log('üöÄ Pr√©paration de Prisma pour le d√©ploiement Vercel...');
  
  // Utiliser le sch√©ma sp√©cial pour Vercel
  const schemaPath = path.join(__dirname, 'schema.prisma');
  const vercelSchemaPath = path.join(__dirname, 'schema.prisma.vercel');
  
  if (fs.existsSync(vercelSchemaPath)) {
    console.log('üìÑ Utilisation du sch√©ma Prisma sp√©cial pour Vercel...');
    fs.copyFileSync(vercelSchemaPath, schemaPath);
  }
  
  // G√©n√©rer le client Prisma
  console.log('üîÑ G√©n√©ration du client Prisma...');
  runCommand('npx prisma generate');
  
  // Ex√©cuter les migrations
  console.log('üîÑ Ex√©cution des migrations Prisma...');
  runCommand('npx prisma migrate deploy');
  
  console.log('‚úÖ Pr√©paration de Prisma termin√©e avec succ√®s!');
} else {
  console.log('‚è© Pas sur Vercel, aucune action n√©cessaire.');
}
