// Route API pour d√©boguer la connexion √† la base de donn√©es
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

export async function GET() {
  console.log('üîç D√©bogage de la connexion √† la base de donn√©es...');
  
  // Afficher les variables d'environnement (sans les valeurs sensibles)
  console.log('Variables d\'environnement:');
  console.log(`DATABASE_URL: ${process.env.DATABASE_URL ? '***d√©finie***' : '***non d√©finie***'}`);
  if (process.env.DATABASE_URL) {
    // Masquer le mot de passe dans les logs
    const maskedUrl = process.env.DATABASE_URL.replace(/:[^:]*@/, ':***@');
    console.log(`URL masqu√©e: ${maskedUrl}`);
  }
  
  try {
    console.log('üîÑ Initialisation du client Prisma...');
    const prisma = new PrismaClient({
      log: ['query', 'info', 'warn', 'error'],
    });
    
    console.log('üîÑ Tentative de connexion √† la base de donn√©es...');
    await prisma.$connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie avec succ√®s!');
    
    // Tester une requ√™te simple
    console.log('üîÑ Test d\'une requ√™te simple...');
    const tables = await prisma.$queryRaw`SELECT tablename FROM pg_catalog.pg_tables WHERE schemaname = 'public'`;
    console.log('üìä Tables dans la base de donn√©es:');
    console.log(tables);
    
    // D√©connecter
    await prisma.$disconnect();
    console.log('üëã Connexion ferm√©e.');
    
    return NextResponse.json({
      success: true,
      message: 'Connexion √† la base de donn√©es √©tablie avec succ√®s!',
      tables: tables.map(table => table.tablename)
    });
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† la base de donn√©es:', error);
    
    return NextResponse.json({
      success: false,
      message: 'Erreur de connexion √† la base de donn√©es',
      error: error.message,
      stack: error.stack
    }, { status: 500 });
  }
}
