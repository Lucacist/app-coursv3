// Version optimis√©e de l'API cours utilisant le client Prisma configur√© pour Supabase
import { NextResponse } from 'next/server';
import { prisma } from '@/prisma/prisma-client';

// GET - R√©cup√©rer tous les cours ou les cours d'un dossier sp√©cifique
export async function GET(request) {
  try {
    console.log('üîç R√©cup√©ration des cours...');
    
    // V√©rifier la connexion √† la base de donn√©es
    console.log('üîÑ V√©rification de la connexion √† la base de donn√©es...');
    await prisma.$connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie avec succ√®s!');
    
    const { searchParams } = new URL(request.url);
    const folderId = searchParams.get('folderId');
    
    // Construire la requ√™te en fonction des param√®tres
    let whereClause = {};
    
    if (folderId) {
      if (folderId === 'null') {
        whereClause = {
          folderId: null
        };
      } else {
        whereClause = {
          folderId: parseInt(folderId)
        };
      }
    }
    
    // Ex√©cuter la requ√™te avec gestion d'erreur am√©lior√©e
    console.log(`üîÑ Ex√©cution de la requ√™te pour r√©cup√©rer les cours (folderId: ${folderId || 'tous'})...`);
    
    try {
      const cours = await prisma.cours.findMany({
        where: whereClause,
        include: {
          folder: true,
          image: true
        }
      });
      
      console.log(`‚úÖ ${cours.length} cours r√©cup√©r√©s avec succ√®s!`);
      
      // Fermer la connexion
      await prisma.$disconnect();
      
      return NextResponse.json(cours);
    } catch (dbError) {
      console.error('‚ùå Erreur lors de la requ√™te √† la base de donn√©es:', dbError);
      
      // Informations de d√©bogage
      console.log('üìä Informations de d√©bogage:');
      console.log(`DATABASE_URL: ${process.env.DATABASE_URL ? '***d√©finie***' : '***non d√©finie***'}`);
      if (process.env.DATABASE_URL) {
        // Masquer le mot de passe dans les logs
        const maskedUrl = process.env.DATABASE_URL.replace(/:[^:]*@/, ':***@');
        console.log(`URL masqu√©e: ${maskedUrl}`);
      }
      
      // Fermer la connexion en cas d'erreur
      await prisma.$disconnect();
      
      throw dbError;
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des cours:', error);
    
    return NextResponse.json(
      { 
        error: 'Erreur lors de la r√©cup√©ration des cours',
        message: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      },
      { status: 500 }
    );
  }
}

// POST - Cr√©er un nouveau cours
export async function POST(request) {
  try {
    console.log('üîç Cr√©ation d\'un nouveau cours...');
    
    const { title, url, folderId, imageUrl } = await request.json();
    
    // V√©rifier les donn√©es requises
    if (!title || !url) {
      return NextResponse.json(
        { error: 'Le titre et l\'URL sont requis' },
        { status: 400 }
      );
    }
    
    // Cr√©er le cours
    console.log('üîÑ Cr√©ation du cours dans la base de donn√©es...');
    const newCours = await prisma.cours.create({
      data: {
        title,
        url,
        folderId: folderId ? parseInt(folderId) : null
      },
    });
    
    // Si une image est fournie, cr√©er une entr√©e dans la table CoursImage
    if (imageUrl) {
      console.log('üîÑ Ajout de l\'image au cours...');
      await prisma.coursImage.create({
        data: {
          url: imageUrl,
          coursId: newCours.id
        }
      });
    }
    
    // R√©cup√©rer le cours avec ses relations
    console.log('üîÑ R√©cup√©ration du cours cr√©√© avec ses relations...');
    const coursWithRelations = await prisma.cours.findUnique({
      where: {
        id: newCours.id
      },
      include: {
        folder: true,
        image: true
      }
    });
    
    console.log('‚úÖ Cours cr√©√© avec succ√®s!');
    
    return NextResponse.json(coursWithRelations);
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du cours:', error);
    
    return NextResponse.json(
      { 
        error: 'Erreur lors de la cr√©ation du cours',
        message: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      },
      { status: 500 }
    );
  }
}

// DELETE - Supprimer un cours
export async function DELETE(request) {
  try {
    console.log('üîç Suppression d\'un cours...');
    
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json(
        { error: 'ID du cours non sp√©cifi√©' },
        { status: 400 }
      );
    }
    
    // Supprimer le cours (la suppression en cascade supprimera aussi l'image)
    console.log(`üîÑ Suppression du cours avec l'ID ${id}...`);
    await prisma.cours.delete({
      where: {
        id: parseInt(id)
      }
    });
    
    console.log('‚úÖ Cours supprim√© avec succ√®s!');
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression du cours:', error);
    
    return NextResponse.json(
      { 
        error: 'Erreur lors de la suppression du cours',
        message: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      },
      { status: 500 }
    );
  }
}
